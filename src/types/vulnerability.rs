use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Vulnerability {
    pub id: String,
    pub title: String,
    pub description: String,
    pub severity: String,
    pub category: String,
    pub line_number: Option<usize>,
    pub code_snippet: Option<String>,
    pub recommendation: String,
    pub references: Vec<String>,
    pub swc_id: String,           // Add SWC ID
    pub impact: String,           // Add impact description
    pub example: Option<VulnerabilityExample>, // Add code example
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityExample {
    pub vulnerable_code: String,
    pub fixed_code: String,
    pub explanation: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityPattern {
    pub id: String,
    pub name: String,
    pub description: String,
    pub severity: String,
    pub category: String,
    pub cwe_id: Option<String>,
    pub swc_id: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SecurityIssue {
    pub issue_type: String,
    pub severity: String,
    pub description: String,
    pub location: IssueLocation,
    pub fix_suggestion: String,
    pub confidence: f64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IssueLocation {
    pub file_name: String,
    pub line_number: usize,
    pub column_number: Option<usize>,
    pub function_name: Option<String>,
}

impl Vulnerability {
    pub fn new(id: String, title: String, severity: String) -> Self {
        Self {
            id: id.clone(),
            title,
            description: String::new(),
            severity,
            category: "General".to_string(),
            line_number: None,
            code_snippet: None,
            recommendation: String::new(),
            references: Vec::new(),
            swc_id: id, // Use the same ID for SWC
            impact: "Unknown impact".to_string(),
            example: None,
        }
    }

    pub fn with_description(mut self, description: String) -> Self {
        self.description = description;
        self
    }

    pub fn with_category(mut self, category: String) -> Self {
        self.category = category;
        self
    }

    pub fn with_line_number(mut self, line_number: usize) -> Self {
        self.line_number = Some(line_number);
        self
    }

    pub fn with_code_snippet(mut self, code_snippet: String) -> Self {
        self.code_snippet = Some(code_snippet);
        self
    }

    pub fn with_recommendation(mut self, recommendation: String) -> Self {
        self.recommendation = recommendation;
        self
    }

    pub fn add_reference(mut self, reference: String) -> Self {
        self.references.push(reference);
        self
    }

    pub fn is_critical(&self) -> bool {
        self.severity == "Critical"
    }

    pub fn is_high(&self) -> bool {
        self.severity == "High"
    }

    pub fn is_medium(&self) -> bool {
        self.severity == "Medium"
    }

    pub fn is_low(&self) -> bool {
        self.severity == "Low"
    }

    pub fn severity_score(&self) -> u8 {
        match self.severity.as_str() {
            "Critical" => 4,
            "High" => 3,
            "Medium" => 2,
            "Low" => 1,
            _ => 0,
        }
    }
}

impl VulnerabilityPattern {
    pub fn new(id: String, name: String, severity: String) -> Self {
        Self {
            id,
            name,
            description: String::new(),
            severity,
            category: "General".to_string(),
            cwe_id: None,
            swc_id: None,
        }
    }

    pub fn with_description(mut self, description: String) -> Self {
        self.description = description;
        self
    }

    pub fn with_category(mut self, category: String) -> Self {
        self.category = category;
        self
    }

    pub fn with_cwe_id(mut self, cwe_id: String) -> Self {
        self.cwe_id = Some(cwe_id);
        self
    }

    pub fn with_swc_id(mut self, swc_id: String) -> Self {
        self.swc_id = Some(swc_id);
        self
    }
}

impl SecurityIssue {
    pub fn new(issue_type: String, severity: String, location: IssueLocation) -> Self {
        Self {
            issue_type,
            severity,
            description: String::new(),
            location,
            fix_suggestion: String::new(),
            confidence: 1.0,
        }
    }

    pub fn with_description(mut self, description: String) -> Self {
        self.description = description;
        self
    }

    pub fn with_fix_suggestion(mut self, fix_suggestion: String) -> Self {
        self.fix_suggestion = fix_suggestion;
        self
    }

    pub fn with_confidence(mut self, confidence: f64) -> Self {
        self.confidence = confidence.clamp(0.0, 1.0);
        self
    }
}

impl IssueLocation {
    pub fn new(file_name: String, line_number: usize) -> Self {
        Self {
            file_name,
            line_number,
            column_number: None,
            function_name: None,
        }
    }

    pub fn with_column(mut self, column_number: usize) -> Self {
        self.column_number = Some(column_number);
        self
    }

    pub fn with_function(mut self, function_name: String) -> Self {
        self.function_name = Some(function_name);
        self
    }
}

// Common vulnerability types
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum CommonVulnerability {
    Reentrancy,
    IntegerOverflow,
    IntegerUnderflow,
    UnauthorizedAccess,
    DoS,
    FrontRunning,
    TimestampDependence,
    TxOriginUsage,
    UncheckedReturnValue,
    UninitializedStorage,
    DelegatecallToUntrusted,
    WeakRandomness,
    UnprotectedSelfDestruct,
    SignatureReplay,
    RaceCondition,
}

impl CommonVulnerability {
    pub fn description(&self) -> &'static str {
        match self {
            CommonVulnerability::Reentrancy => "Reentrancy attack vulnerability",
            CommonVulnerability::IntegerOverflow => "Integer overflow vulnerability",
            CommonVulnerability::IntegerUnderflow => "Integer underflow vulnerability",
            CommonVulnerability::UnauthorizedAccess => "Unauthorized access to functions",
            CommonVulnerability::DoS => "Denial of Service vulnerability",
            CommonVulnerability::FrontRunning => "Front-running attack vulnerability",
            CommonVulnerability::TimestampDependence => "Timestamp dependence vulnerability",
            CommonVulnerability::TxOriginUsage => "Usage of tx.origin for authorization",
            CommonVulnerability::UncheckedReturnValue => "Unchecked return value",
            CommonVulnerability::UninitializedStorage => "Uninitialized storage pointer",
            CommonVulnerability::DelegatecallToUntrusted => "Delegatecall to untrusted contract",
            CommonVulnerability::WeakRandomness => "Weak source of randomness",
            CommonVulnerability::UnprotectedSelfDestruct => "Unprotected selfdestruct",
            CommonVulnerability::SignatureReplay => "Signature replay attack",
            CommonVulnerability::RaceCondition => "Race condition vulnerability",
        }
    }

    pub fn severity(&self) -> &'static str {
        match self {
            CommonVulnerability::Reentrancy => "Critical",
            CommonVulnerability::IntegerOverflow => "High",
            CommonVulnerability::IntegerUnderflow => "High",
            CommonVulnerability::UnauthorizedAccess => "Critical",
            CommonVulnerability::DoS => "Medium",
            CommonVulnerability::FrontRunning => "Medium",
            CommonVulnerability::TimestampDependence => "Medium",
            CommonVulnerability::TxOriginUsage => "High",
            CommonVulnerability::UncheckedReturnValue => "High",
            CommonVulnerability::UninitializedStorage => "High",
            CommonVulnerability::DelegatecallToUntrusted => "Critical",
            CommonVulnerability::WeakRandomness => "Medium",
            CommonVulnerability::UnprotectedSelfDestruct => "Critical",
            CommonVulnerability::SignatureReplay => "High",
            CommonVulnerability::RaceCondition => "Medium",
        }
    }

    pub fn category(&self) -> &'static str {
        match self {
            CommonVulnerability::Reentrancy => "Reentrancy",
            CommonVulnerability::IntegerOverflow => "Arithmetic",
            CommonVulnerability::IntegerUnderflow => "Arithmetic",
            CommonVulnerability::UnauthorizedAccess => "Access Control",
            CommonVulnerability::DoS => "Denial of Service",
            CommonVulnerability::FrontRunning => "MEV",
            CommonVulnerability::TimestampDependence => "Time Manipulation",
            CommonVulnerability::TxOriginUsage => "Authorization",
            CommonVulnerability::UncheckedReturnValue => "Error Handling",
            CommonVulnerability::UninitializedStorage => "State Variables",
            CommonVulnerability::DelegatecallToUntrusted => "Delegatecall",
            CommonVulnerability::WeakRandomness => "Randomness",
            CommonVulnerability::UnprotectedSelfDestruct => "Lifecycle",
            CommonVulnerability::SignatureReplay => "Cryptography",
            CommonVulnerability::RaceCondition => "Concurrency",
        }
    }
}
